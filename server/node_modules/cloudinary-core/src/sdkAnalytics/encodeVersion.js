import base64Map from "./base64Map";
import reverseVersion from "./reverseVersion";
import stringPad from "./stringPad";

/**
 * @description Encodes a semVer-like version string
 * @param {string} semVer Input can be either x.y.z or x.y
 * @return {string} A string built from 3 characters of the base64 table that encode the semVer
 */
export default function encodeVersion(semVer) {
  let strResult = '';

  
  let parts = semVer.split('.').length;
  let paddedStringLength = parts * 6; 

  
  
  let paddedReversedSemver = reverseVersion(semVer);

  
  let num = parseInt(paddedReversedSemver.split('.').join(''));

  
  

  let paddedBinary = num.toString(2);
  paddedBinary = stringPad(paddedBinary, paddedStringLength, '0');

  
  
  if (paddedBinary.length % 6 !== 0) {
    throw 'Version must be smaller than 43.21.26)';
  }

  
  paddedBinary.match(/.{1,6}/g).forEach((bitString) => {
    
    strResult += base64Map[bitString];
  });

  return strResult;
}
