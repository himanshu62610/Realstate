/* eslint max-statements:0 */
'use strict';

var assert = require('assert');
var parseUrl = require('url').parse;

var getProxyForUrl = require('./').getProxyForUrl;


function runWithEnv(env, callback) {
  var originalEnv = process.env;
  process.env = env;
  try {
    callback();
  } finally {
    process.env = originalEnv;
  }
}


function testProxyUrl(env, expected, input) {
  assert(typeof env === 'object' && env !== null);
  
  
  env = JSON.parse(JSON.stringify(env));

  var title = 'getProxyForUrl(' + JSON.stringify(input) + ')' +
     ' === ' + JSON.stringify(expected);

  
  var stack = {};
  Error.captureStackTrace(stack, testProxyUrl);
  
  
  
  stack = stack.stack.split('\n', 2)[1];

  it(title, function() {
    var actual;
    runWithEnv(env, function() {
      actual = getProxyForUrl(input);
    });
    if (expected === actual) {
      return;  
    }
    try {
      assert.strictEqual(expected, actual); 
      
      throw new Error('assert.strictEqual passed. This is impossible!');
    } catch (e) {
      
      e.stack = e.message + stack;
      throw e;
    }
  });
}

describe('getProxyForUrl', function() {
  describe('No proxy variables', function() {
    var env = {};
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'https:
    testProxyUrl(env, '', 'ftp:
  });

  describe('Invalid URLs', function() {
    var env = {};
    env.ALL_PROXY = 'http:
    testProxyUrl(env, '', 'bogus');
    testProxyUrl(env, '', '
    testProxyUrl(env, '', ':
    testProxyUrl(env, '', ':
    testProxyUrl(env, '', '/path');
    testProxyUrl(env, '', '');
    testProxyUrl(env, '', 'http:');
    testProxyUrl(env, '', 'http:/');
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'prototype:
    testProxyUrl(env, '', 'hasOwnProperty:
    testProxyUrl(env, '', '__proto__:
    testProxyUrl(env, '', undefined);
    testProxyUrl(env, '', null);
    testProxyUrl(env, '', {});
    testProxyUrl(env, '', {host: 'x', protocol: 1});
    testProxyUrl(env, '', {host: 1, protocol: 'x'});
  });

  describe('http_proxy and HTTP_PROXY', function() {
    var env = {};
    env.HTTP_PROXY = 'http:

    testProxyUrl(env, '', 'https:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:

    
    env.http_proxy = 'http:
    testProxyUrl(env, 'http:
  });

  describe('http_proxy with non-sensical value', function() {
    var env = {};
    
    
    
    env.HTTP_PROXY = 'Crazy \n!() { ::
    testProxyUrl(env, 'Crazy \n!() { ::

    
    
    
    env.HTTP_PROXY = 'crazy without colon slash slash';
    testProxyUrl(env, 'http:
  });

  describe('https_proxy and HTTPS_PROXY', function() {
    var env = {};
    
    env.HTTP_PROXY = 'http:
    testProxyUrl(env, '', 'https:

    env.HTTPS_PROXY = 'http:
    testProxyUrl(env, 'http:

    
    env.https_proxy = 'http:
    testProxyUrl(env, 'http:
  });

  describe('ftp_proxy', function() {
    var env = {};
    
    env.FTP_PROXY = 'http:

    testProxyUrl(env, 'http:
    testProxyUrl(env, '', 'ftps:
  });

  describe('all_proxy', function() {
    var env = {};
    env.ALL_PROXY = 'http:
    testProxyUrl(env, 'http:

    
    env.all_proxy = 'http:
    testProxyUrl(env, 'http:
  });

  describe('all_proxy without scheme', function() {
    var env = {};
    env.ALL_PROXY = 'noscheme';
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'https:

    
    testProxyUrl(env, 'bogus-scheme:

    
    testProxyUrl(env, '', 'bogus');
  });

  describe('no_proxy empty', function() {
    var env = {};
    env.HTTPS_PROXY = 'http:

    
    env.NO_PROXY = '';
    testProxyUrl(env, 'http:

    
    env.NO_PROXY = ',';
    testProxyUrl(env, 'http:

    
    env.NO_PROXY = ' ';
    testProxyUrl(env, 'http:

    
    env.NO_PROXY = ',\t,,,\n,  ,\r';
    testProxyUrl(env, 'http:
  });

  describe('no_proxy=example (single host)', function() {
    var env = {};
    env.HTTP_PROXY = 'http:

    env.NO_PROXY = 'example';
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
  });

  describe('no_proxy=sub.example (subdomain)', function() {
    var env = {};
    env.HTTP_PROXY = 'http:

    env.NO_PROXY = 'sub.example';
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
  });

  describe('no_proxy=example:80 (host + port)', function() {
    var env = {};
    env.HTTP_PROXY = 'http:

    env.NO_PROXY = 'example:80';
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
  });

  describe('no_proxy=.example (host suffix)', function() {
    var env = {};
    env.HTTP_PROXY = 'http:

    env.NO_PROXY = '.example';
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, '', 'http:
  });

  describe('no_proxy=*', function() {
    var env = {};
    env.HTTP_PROXY = 'http:
    env.NO_PROXY = '*';
    testProxyUrl(env, '', 'http:
  });

  describe('no_proxy=*.example (host suffix with *.)', function() {
    var env = {};
    env.HTTP_PROXY = 'http:

    env.NO_PROXY = '*.example';
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, '', 'http:
  });

  describe('no_proxy=*example (substring suffix)', function() {
    var env = {};
    env.HTTP_PROXY = 'http:

    env.NO_PROXY = '*example';
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
  });

  describe('no_proxy=.*example (arbitrary wildcards are NOT supported)',
      function() {
    var env = {};
    env.HTTP_PROXY = 'http:

    env.NO_PROXY = '.*example';
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
  });

  describe('no_proxy=[::1],[::2]:80,10.0.0.1,10.0.0.2:80 (IP addresses)',
      function() {
    var env = {};
    env.HTTP_PROXY = 'http:

    env.NO_PROXY = '[::1],[::2]:80,10.0.0.1,10.0.0.2:80';
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:

    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, 'http:

    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:

    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, 'http:
  });

  describe('no_proxy=127.0.0.1/32 (CIDR is NOT supported)', function() {
    var env = {};
    env.HTTP_PROXY = 'http:

    env.NO_PROXY = '127.0.0.1/32';
    testProxyUrl(env, 'http:
    testProxyUrl(env, 'http:
  });

  describe('no_proxy=127.0.0.1 does NOT match localhost', function() {
    var env = {};
    env.HTTP_PROXY = 'http:

    env.NO_PROXY = '127.0.0.1';
    testProxyUrl(env, '', 'http:
    
    testProxyUrl(env, 'http:
  });

  describe('no_proxy with protocols that have a default port', function() {
    var env = {};
    env.WS_PROXY = 'http:
    env.WSS_PROXY = 'http:
    env.HTTP_PROXY = 'http:
    env.HTTPS_PROXY = 'http:
    env.GOPHER_PROXY = 'http:
    env.FTP_PROXY = 'http:
    env.ALL_PROXY = 'http:

    env.NO_PROXY = 'xxx:21,xxx:70,xxx:80,xxx:443';

    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, 'http:

    testProxyUrl(env, '', 'ws:
    testProxyUrl(env, '', 'ws:
    testProxyUrl(env, 'http:

    testProxyUrl(env, '', 'https:
    testProxyUrl(env, '', 'https:
    testProxyUrl(env, 'http:

    testProxyUrl(env, '', 'wss:
    testProxyUrl(env, '', 'wss:
    testProxyUrl(env, 'http:

    testProxyUrl(env, '', 'gopher:
    testProxyUrl(env, '', 'gopher:
    testProxyUrl(env, 'http:

    testProxyUrl(env, '', 'ftp:
    testProxyUrl(env, '', 'ftp:
    testProxyUrl(env, 'http:
  });

  describe('no_proxy should not be case-sensitive', function() {
    var env = {};
    env.HTTP_PROXY = 'http:
    env.NO_PROXY = 'XXX,YYY,ZzZ';

    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
    testProxyUrl(env, '', 'http:
  });

  describe('NPM proxy configuration', function() {
    describe('npm_config_http_proxy should work', function() {
      var env = {};
      
      env.npm_config_http_proxy = 'http:

      testProxyUrl(env, '', 'https:
      testProxyUrl(env, 'http:

      
      env.npm_config_http_proxy = 'http:
      testProxyUrl(env, 'http:
    });
    
    describe('npm_config_http_proxy should take precedence over HTTP_PROXY and npm_config_proxy', function() {
      var env = {};
      
      env.npm_config_http_proxy = 'http:
      
      env.npm_config_proxy = 'http:
      env.HTTP_PROXY = 'http:

      testProxyUrl(env, 'http:
    });
    describe('npm_config_https_proxy should work', function() {
      var env = {};
      
      env.npm_config_http_proxy = 'http:
      testProxyUrl(env, '', 'https:

      
      env.npm_config_https_proxy = 'http:
      testProxyUrl(env, 'http:

      
      env.npm_config_https_proxy = 'http:
      testProxyUrl(env, 'http:
    });
    
    describe('npm_config_https_proxy should take precedence over HTTPS_PROXY and npm_config_proxy', function() {
      var env = {};
      
      env.npm_config_https_proxy = 'http:
      
      env.npm_config_proxy = 'http:
      env.HTTPS_PROXY = 'http:

      testProxyUrl(env, 'http:
    });
    describe('npm_config_proxy should work', function() {
      var env = {};
      
      env.npm_config_proxy = 'http:
      testProxyUrl(env, 'http:
      testProxyUrl(env, 'http:

      
      env.npm_config_proxy = 'http:
      testProxyUrl(env, 'http:
      testProxyUrl(env, 'http:
    });
    
    describe('HTTP_PROXY and HTTPS_PROXY should take precedence over npm_config_proxy', function() {
      var env = {};
      env.HTTP_PROXY = 'http:
      env.HTTPS_PROXY = 'http:
      
      env.npm_config_proxy = 'http:
      testProxyUrl(env, 'http:
      testProxyUrl(env, 'http:
    });
    describe('npm_config_no_proxy should work', function() {
      var env = {};
      env.HTTP_PROXY = 'http:
      
      env.npm_config_no_proxy = 'example';

      testProxyUrl(env, '', 'http:
      testProxyUrl(env, 'http:
    });
    
    describe('npm_config_no_proxy should take precedence over NO_PROXY', function() {
      var env = {};
      env.HTTP_PROXY = 'http:
      env.NO_PROXY = 'otherwebsite';
      
      env.npm_config_no_proxy = 'example';

      testProxyUrl(env, '', 'http:
      testProxyUrl(env, 'http:
    });
  });
});
