




















var assert = require('assert');
var util = require('util');

var url = require('./url');

test('god', function() {



var parseTests = {
  '
    'href': '
    'pathname': '
    'path': '
  },

  'HTTP:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'www.example.com',
    'hostname': 'www.example.com',
    'pathname': '/',
    'path': '/'
  },

  'HTTP:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'www.example.com',
    'hostname': 'www.example.com',
    'pathname': '/',
    'path': '/'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'www.example.com',
    'hostname': 'www.example.com',
    'pathname': '/',
    'path': '/'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'auth': 'user:pw',
    'host': 'www.example.com',
    'hostname': 'www.example.com',
    'pathname': '/',
    'path': '/'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'auth': 'USER:PW',
    'host': 'www.example.com',
    'hostname': 'www.example.com',
    'pathname': '/',
    'path': '/'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'auth': 'user',
    'host': 'www.example.com',
    'hostname': 'www.example.com',
    'pathname': '/',
    'path': '/'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'auth': 'user:pw',
    'host': 'www.example.com',
    'hostname': 'www.example.com',
    'pathname': '/',
    'path': '/'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'x.com',
    'hostname': 'x.com',
    'search': '?that%27s',
    'query': 'that%27s',
    'pathname': '/path',
    'hash': '#all,%20folks',
    'path': '/path?that%27s'
  },

  'HTTP:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'x.com',
    'hostname': 'x.com',
    'pathname': '/Y',
    'path': '/Y'
  },

  
  'HtTp:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'x.y.com',
    'hostname': 'x.y.com',
    'pathname': '/*a/b/c',
    'search': '?d=e',
    'query': 'd=e',
    'hash': '#f%20g%3Ch%3Ei',
    'path': '/*a/b/c?d=e'
  },

  
  'HtTp:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'x.y.com',
    'hostname': 'x.y.com',
    'pathname': '/*A/b/c',
    'search': '?d=e',
    'query': 'd=e',
    'hash': '#f%20g%3Ch%3Ei',
    'path': '/*A/b/c?d=e'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'x...y...',
    'hostname': 'x...y...',
    'hash': '#p',
    'pathname': '/',
    'path': '/'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'x',
    'hostname': 'x',
    'pathname': '/p/%22quoted%22',
    'path': '/p/%22quoted%22'
  },

  '<http:
    'href': '%3Chttp:
    'pathname': '%3Chttp:
    'path': '%3Chttp:
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'www.narwhaljs.org',
    'hostname': 'www.narwhaljs.org',
    'search': '?id=news',
    'query': 'id=news',
    'pathname': '/blog/categories',
    'path': '/blog/categories?id=news'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'mt0.google.com',
    'hostname': 'mt0.google.com',
    'pathname': '/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s=',
    'path': '/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s='
  },

  'http:
    'href': 'http:
        '&x=2&y=2&z=3&s=',
    'protocol': 'http:',
    'slashes': true,
    'host': 'mt0.google.com',
    'hostname': 'mt0.google.com',
    'search': '???&hl=en&src=api&x=2&y=2&z=3&s=',
    'query': '??&hl=en&src=api&x=2&y=2&z=3&s=',
    'pathname': '/vt/lyrs=m@114',
    'path': '/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s='
  },

  'http:
      {
        'href': 'http:
            '&hl=en&src=api&x=2&y=2&z=3&s=',
        'protocol': 'http:',
        'slashes': true,
        'host': 'mt0.google.com',
        'auth': 'user:pass',
        'hostname': 'mt0.google.com',
        'search': '???&hl=en&src=api&x=2&y=2&z=3&s=',
        'query': '??&hl=en&src=api&x=2&y=2&z=3&s=',
        'pathname': '/vt/lyrs=m@114',
        'path': '/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s='
      },

  'file:
    'href': 'file:
    'slashes': true,
    'protocol': 'file:',
    'pathname': '/etc/passwd',
    'hostname': '',
    'host': '',
    'path': '/etc/passwd'
  },

  'file:
    'href': 'file:
    'protocol': 'file:',
    'slashes': true,
    'pathname': '/etc/passwd',
    'hostname': 'localhost',
    'host': 'localhost',
    'path': '/etc/passwd'
  },

  'file:
    'href': 'file:
    'protocol': 'file:',
    'slashes': true,
    'pathname': '/etc/passwd',
    'hostname': 'foo',
    'host': 'foo',
    'path': '/etc/passwd'
  },

  'file:
    'href': 'file:
    'slashes': true,
    'protocol': 'file:',
    'pathname': '/etc/node/',
    'hostname': '',
    'host': '',
    'path': '/etc/node/'
  },

  'file:
    'href': 'file:
    'protocol': 'file:',
    'slashes': true,
    'pathname': '/etc/node/',
    'hostname': 'localhost',
    'host': 'localhost',
    'path': '/etc/node/'
  },

  'file:
    'href': 'file:
    'protocol': 'file:',
    'slashes': true,
    'pathname': '/etc/node/',
    'hostname': 'foo',
    'host': 'foo',
    'path': '/etc/node/'
  },

  'http:/baz/../foo/bar' : {
    'href': 'http:/baz/../foo/bar',
    'protocol': 'http:',
    'pathname': '/baz/../foo/bar',
    'path': '/baz/../foo/bar'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'example.com:8000',
    'auth': 'user:pass',
    'port': '8000',
    'hostname': 'example.com',
    'hash': '#frag',
    'search': '?baz=quux',
    'query': 'baz=quux',
    'pathname': '/foo/bar',
    'path': '/foo/bar?baz=quux'
  },

  '
    'href': '
    'slashes': true,
    'host': 'example.com:8000',
    'auth': 'user:pass',
    'port': '8000',
    'hostname': 'example.com',
    'hash': '#frag',
    'search': '?baz=quux',
    'query': 'baz=quux',
    'pathname': '/foo/bar',
    'path': '/foo/bar?baz=quux'
  },

  '/foo/bar?baz=quux#frag' : {
    'href': '/foo/bar?baz=quux#frag',
    'hash': '#frag',
    'search': '?baz=quux',
    'query': 'baz=quux',
    'pathname': '/foo/bar',
    'path': '/foo/bar?baz=quux'
  },

  'http:/foo/bar?baz=quux#frag' : {
    'href': 'http:/foo/bar?baz=quux#frag',
    'protocol': 'http:',
    'hash': '#frag',
    'search': '?baz=quux',
    'query': 'baz=quux',
    'pathname': '/foo/bar',
    'path': '/foo/bar?baz=quux'
  },

  'mailto:foo@bar.com?subject=hello' : {
    'href': 'mailto:foo@bar.com?subject=hello',
    'protocol': 'mailto:',
    'host': 'bar.com',
    'auth' : 'foo',
    'hostname' : 'bar.com',
    'search': '?subject=hello',
    'query': 'subject=hello',
    'path': '?subject=hello'
  },

  'javascript:alert(\'hello\');' : {
    'href': 'javascript:alert(\'hello\');',
    'protocol': 'javascript:',
    'pathname': 'alert(\'hello\');',
    'path': 'alert(\'hello\');'
  },

  'xmpp:isaacschlueter@jabber.org' : {
    'href': 'xmpp:isaacschlueter@jabber.org',
    'protocol': 'xmpp:',
    'host': 'jabber.org',
    'auth': 'isaacschlueter',
    'hostname': 'jabber.org'
  },

  'http:
    'href' : 'http:
    'protocol' : 'http:',
    'slashes': true,
    'host' : '127.0.0.1:8080',
    'auth' : 'atpass:foo@bar',
    'hostname' : '127.0.0.1',
    'port' : '8080',
    'pathname': '/path',
    'search' : '?search=foo',
    'query' : 'search=foo',
    'hash' : '#bar',
    'path': '/path?search=foo'
  },

  'svn+ssh:
    'href': 'svn+ssh:
    'host': 'foo',
    'hostname': 'foo',
    'protocol': 'svn+ssh:',
    'pathname': '/bar',
    'path': '/bar',
    'slashes': true
  },

  'dash-test:
    'href': 'dash-test:
    'host': 'foo',
    'hostname': 'foo',
    'protocol': 'dash-test:',
    'pathname': '/bar',
    'path': '/bar',
    'slashes': true
  },

  'dash-test:foo/bar': {
    'href': 'dash-test:foo/bar',
    'host': 'foo',
    'hostname': 'foo',
    'protocol': 'dash-test:',
    'pathname': '/bar',
    'path': '/bar'
  },

  'dot.test:
    'href': 'dot.test:
    'host': 'foo',
    'hostname': 'foo',
    'protocol': 'dot.test:',
    'pathname': '/bar',
    'path': '/bar',
    'slashes': true
  },

  'dot.test:foo/bar': {
    'href': 'dot.test:foo/bar',
    'host': 'foo',
    'hostname': 'foo',
    'protocol': 'dot.test:',
    'pathname': '/bar',
    'path': '/bar'
  },

  
  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'www.xn--wgv71a119e.com',
    'hostname': 'www.xn--wgv71a119e.com',
    'pathname': '/',
    'path': '/'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'example.xn--bcher-kva.com',
    'hostname': 'example.xn--bcher-kva.com',
    'pathname': '/',
    'path': '/'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'www.xn--ffchen-9ta.com',
    'hostname': 'www.xn--ffchen-9ta.com',
    'pathname': '/',
    'path': '/'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'www.xn--ffchen-9ta.com',
    'hostname': 'www.xn--ffchen-9ta.com',
    'pathname': '/*A/b/c',
    'search': '?d=e',
    'query': 'd=e',
    'hash': '#f%20g%3Ch%3Ei',
    'path': '/*A/b/c?d=e'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'xn--slier-bsa.com',
    'hostname': 'xn--slier-bsa.com',
    'pathname': '/',
    'path': '/'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'xn--egbpdaj6bu4bxfgehfvwxn.xn--egb9f',
    'hostname': 'xn--egbpdaj6bu4bxfgehfvwxn.xn--egb9f',
    'pathname': '/',
    'path': '/'
  },

  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'xn--hgi.ws',
    'hostname': 'xn--hgi.ws',
    'pathname': '/➡',
    'path': '/➡'
  },

  'http:
    protocol: 'http:',
    slashes: true,
    host: 'bucket_name.s3.amazonaws.com',
    hostname: 'bucket_name.s3.amazonaws.com',
    pathname: '/image.jpg',
    href: 'http:
    'path': '/image.jpg'
  },

  'git+http:
    protocol: 'git+http:',
    slashes: true,
    host: 'github.com',
    hostname: 'github.com',
    pathname: '/joyent/node.git',
    path: '/joyent/node.git',
    href: 'git+http:
  },

  
  
  
  'local1@domain1': {
    'pathname': 'local1@domain1',
    'path': 'local1@domain1',
    'href': 'local1@domain1'
  },

  
  
  'www.example.com' : {
    'href': 'www.example.com',
    'pathname': 'www.example.com',
    'path': 'www.example.com'
  },

  
  '[fe80::1]': {
    'href': '[fe80::1]',
    'pathname': '[fe80::1]',
    'path': '[fe80::1]'
  },

  'coap:
    'protocol': 'coap:',
    'slashes': true,
    'host': '[fedc:ba98:7654:3210:fedc:ba98:7654:3210]',
    'hostname': 'fedc:ba98:7654:3210:fedc:ba98:7654:3210',
    'href': 'coap:
    'pathname': '/',
    'path': '/'
  },

  'coap:
    'protocol': 'coap:',
    'slashes': true,
    'host': '[1080:0:0:0:8:800:200c:417a]:61616',
    'port': '61616',
    'hostname': '1080:0:0:0:8:800:200c:417a',
    'href': 'coap:
    'pathname': '/',
    'path': '/'
  },

  'http:
    'protocol': 'http:',
    'slashes': true,
    'auth': 'user:password',
    'host': '[3ffe:2a00:100:7031::1]:8080',
    'port': '8080',
    'hostname': '3ffe:2a00:100:7031::1',
    'href': 'http:
    'pathname': '/',
    'path': '/'
  },

  'coap:
    'protocol': 'coap:',
    'slashes': true,
    'auth': 'u:p',
    'host': '[::192.9.5.5]:61616',
    'port': '61616',
    'hostname': '::192.9.5.5',
    'href': 'coap:
    'search': '?n=Temperature',
    'query': 'n=Temperature',
    'pathname': '/.well-known/r',
    'path': '/.well-known/r?n=Temperature'
  },

  
  'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'example.com',
    'hostname': 'example.com',
    'href': 'http:
    'pathname': '/',
    'path': '/'
  },

  'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'example.com',
    'hostname': 'example.com',
    'href': 'http:
    'pathname': '/a/b.html',
    'path': '/a/b.html'
  },

  'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'example.com',
    'hostname': 'example.com',
    'href': 'http:
    'search': '?a=b',
    'query': 'a=b',
    'pathname': '/',
    'path': '/?a=b'
  },

  'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'example.com',
    'hostname': 'example.com',
    'href': 'http:
    'hash': '#abc',
    'pathname': '/',
    'path': '/'
  },

  'http:
    'protocol': 'http:',
    'slashes': true,
    'host': '[fe80::1]',
    'hostname': 'fe80::1',
    'href': 'http:
    'search': '?a=b',
    'query': 'a=b',
    'hash': '#abc',
    'pathname': '/a/b',
    'path': '/a/b?a=b'
  },

  'http:
    'protocol': 'http:',
    'slashes': true,
    'host': '-lovemonsterz.tumblr.com',
    'hostname': '-lovemonsterz.tumblr.com',
    'href': 'http:
    'pathname': '/rss',
    'path': '/rss',
  },

  'http:
    'protocol': 'http:',
    'slashes': true,
    'port': '80',
    'host': '-lovemonsterz.tumblr.com:80',
    'hostname': '-lovemonsterz.tumblr.com',
    'href': 'http:
    'pathname': '/rss',
    'path': '/rss',
  },

  'http:
    'protocol': 'http:',
    'slashes': true,
    'auth': 'user:pass',
    'host': '-lovemonsterz.tumblr.com',
    'hostname': '-lovemonsterz.tumblr.com',
    'href': 'http:
    'pathname': '/rss',
    'path': '/rss',
  },

  'http:
    'protocol': 'http:',
    'slashes': true,
    'auth': 'user:pass',
    'port': '80',
    'host': '-lovemonsterz.tumblr.com:80',
    'hostname': '-lovemonsterz.tumblr.com',
    'href': 'http:
    'pathname': '/rss',
    'path': '/rss',
  },

  'http:
    'protocol': 'http:',
    'slashes': true,
    'host': '_jabber._tcp.google.com',
    'hostname': '_jabber._tcp.google.com',
    'href': 'http:
    'pathname': '/test',
    'path': '/test',
  },

  'http:
    'protocol': 'http:',
    'slashes': true,
    'auth': 'user:pass',
    'host': '_jabber._tcp.google.com',
    'hostname': '_jabber._tcp.google.com',
    'href': 'http:
    'pathname': '/test',
    'path': '/test',
  },

  'http:
    'protocol': 'http:',
    'slashes': true,
    'port': '80',
    'host': '_jabber._tcp.google.com:80',
    'hostname': '_jabber._tcp.google.com',
    'href': 'http:
    'pathname': '/test',
    'path': '/test',
  },

  'http:
    'protocol': 'http:',
    'slashes': true,
    'auth': 'user:pass',
    'port': '80',
    'host': '_jabber._tcp.google.com:80',
    'hostname': '_jabber._tcp.google.com',
    'href': 'http:
    'pathname': '/test',
    'path': '/test',
  },

  'http:
    protocol: 'http:',
    slashes: true,
    auth: 'a@b',
    host: 'c',
    hostname: 'c',
    href: 'http:
    path: '/',
    pathname: '/'
  },

  'http:
    protocol: 'http:',
    slashes: true,
    auth: 'a',
    host: 'b',
    hostname: 'b',
    href: 'http:
    path: '/?@c',
    pathname: '/',
    search: '?@c',
    query: '@c'
  },

  'http:
    protocol: 'http:',
    slashes: true,
    auth: 'a\r" \t\n<\'b:b',
    host: 'c',
    port: null,
    hostname: 'c',
    hash: null,
    search: '?f',
    query: 'f',
    pathname: '%0D%0Ad/e',
    path: '%0D%0Ad/e?f',
    href: 'http:
  }

};

for (var u in parseTests) {
  var actual = url.parse(u),
      spaced = url.parse('     \t  ' + u + '\n\t');
      expected = parseTests[u];

  Object.keys(actual).forEach(function (i) {
    if (expected[i] === undefined && actual[i] === null) {
      expected[i] = null;
    }
  });

  assert.deepEqual(actual, expected);
  assert.deepEqual(spaced, expected);

  var expected = parseTests[u].href,
      actual = url.format(parseTests[u]);

  assert.equal(actual, expected,
               'format(' + u + ') == ' + u + '\nactual:' + actual);
}

var parseTestsWithQueryString = {
  '/foo/bar?baz=quux#frag' : {
    'href': '/foo/bar?baz=quux#frag',
    'hash': '#frag',
    'search': '?baz=quux',
    'query': {
      'baz': 'quux'
    },
    'pathname': '/foo/bar',
    'path': '/foo/bar?baz=quux'
  },
  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'example.com',
    'hostname': 'example.com',
    'query': {},
    'search': '',
    'pathname': '/',
    'path': '/'
  }
};
for (var u in parseTestsWithQueryString) {
  var actual = url.parse(u, true);
  var expected = parseTestsWithQueryString[u];
  for (var i in actual) {
    if (actual[i] === null && expected[i] === undefined) {
      expected[i] = null;
    }
  }

  assert.deepEqual(actual, expected);
}



var formatTests = {
  'http:
    'href': 'http:
    'protocol': 'http:',
    'slashes': true,
    'host': 'example.com',
    'hostname': 'example.com',
    'search': '?',
    'query': {},
    'pathname': '/'
  },
  'http:
    'href': 'http:
    'protocol': 'http:',
    'host': 'example.com',
    'hostname': 'example.com',
    'hash': '#frag',
    'search': '?foo=bar',
    'query': 'foo=bar',
    'pathname': '/'
  },
  'http:
    'href': 'http:
    'protocol': 'http:',
    'host': 'example.com',
    'hostname': 'example.com',
    'hash': '#frag',
    'search': '?foo=@bar',
    'query': 'foo=@bar',
    'pathname': '/'
  },
  'http:
    'href': 'http:
    'protocol': 'http:',
    'host': 'example.com',
    'hostname': 'example.com',
    'hash': '#frag',
    'search': '?foo=/bar/',
    'query': 'foo=/bar/',
    'pathname': '/'
  },
  'http:
    'href': 'http:
    'protocol': 'http:',
    'host': 'example.com',
    'hostname': 'example.com',
    'hash': '#frag',
    'search': '?foo=?bar/',
    'query': 'foo=?bar/',
    'pathname': '/'
  },
  'http:
    'href': 'http:
    'protocol': 'http:',
    'host': 'example.com',
    'hostname': 'example.com',
    'hash': '#frag=?bar/#frag',
    'pathname': '/'
  },
  'http:
    'href': 'http:
    'protocol': 'http:',
    'host': 'google.com',
    'pathname': '/%22%20onload=%22alert(42)/'
  },
  'http:
    'href': 'http:
    'protocol': 'http',
    'host': 'a.com',
    'pathname': 'a/b/c',
    'hash': 'h',
    'search': 's'
  },
  'xmpp:isaacschlueter@jabber.org' : {
    'href': 'xmpp:isaacschlueter@jabber.org',
    'protocol': 'xmpp:',
    'host': 'jabber.org',
    'auth': 'isaacschlueter',
    'hostname': 'jabber.org'
  },
  'http:
    'href': 'http:
    'auth': 'atpass:foo@bar',
    'hostname': '127.0.0.1',
    'protocol': 'http:',
    'pathname': '/'
  },
  'http:
    'href': 'http:
    'auth': 'atslash/@:/@',
    'hostname': 'foo',
    'protocol': 'http:',
    'pathname': '/'
  },
  'svn+ssh:
    'href': 'svn+ssh:
    'hostname': 'foo',
    'protocol': 'svn+ssh:',
    'pathname': '/bar',
    'slashes': true
  },
  'dash-test:
    'href': 'dash-test:
    'hostname': 'foo',
    'protocol': 'dash-test:',
    'pathname': '/bar',
    'slashes': true
  },
  'dash-test:foo/bar': {
    'href': 'dash-test:foo/bar',
    'hostname': 'foo',
    'protocol': 'dash-test:',
    'pathname': '/bar'
  },
  'dot.test:
    'href': 'dot.test:
    'hostname': 'foo',
    'protocol': 'dot.test:',
    'pathname': '/bar',
    'slashes': true
  },
  'dot.test:foo/bar': {
    'href': 'dot.test:foo/bar',
    'hostname': 'foo',
    'protocol': 'dot.test:',
    'pathname': '/bar'
  },
  
  'coap:u:p@[::1]:61616/.well-known/r?n=Temperature': {
    'href': 'coap:u:p@[::1]:61616/.well-known/r?n=Temperature',
    'protocol': 'coap:',
    'auth': 'u:p',
    'hostname': '::1',
    'port': '61616',
    'pathname': '/.well-known/r',
    'search': 'n=Temperature'
  },
  'coap:[fedc:ba98:7654:3210:fedc:ba98:7654:3210]:61616/s/stopButton': {
    'href': 'coap:[fedc:ba98:7654:3210:fedc:ba98:7654:3210]:61616/s/stopButton',
    'protocol': 'coap',
    'host': '[fedc:ba98:7654:3210:fedc:ba98:7654:3210]:61616',
    'pathname': '/s/stopButton'
  },

  
  
  

  
  '/path/to/%%23%3F+=&.txt?foo=theA1#bar' : {
    href : '/path/to/%%23%3F+=&.txt?foo=theA1#bar',
    pathname: '/path/to/%#?+=&.txt',
    query: {
      foo: 'theA1'
    },
    hash: "#bar"
  },

  
  '/path/to/%%23%3F+=&.txt?foo=the%231#bar' : {
    href : '/path/to/%%23%3F+=&.txt?foo=the%231#bar',
    pathname: '/path/to/%#?+=&.txt',
    query: {
      foo: 'the#1'
    },
    hash: "#bar"
  },

  
  'http:
    href: 'http:
    protocol: 'http:',
    hostname: 'ex.com',
    hash: '#frag',
    search: '?abc=the#1?&foo=bar',
    pathname: '/foo?100%m#r',
  },

  
  'http:
    href: 'http:
    protocol: 'http:',
    hostname: 'ex.com',
    hash: '#frag',
    search: '?abc=the#1?&foo=bar',
    pathname: '/fooA100%mBr',
  }
};
for (var u in formatTests) {
  var expect = formatTests[u].href;
  delete formatTests[u].href;
  var actual = url.format(u);
  var actualObj = url.format(formatTests[u]);
  assert.equal(actual, expect,
               'wonky format(' + u + ') == ' + expect +
               '\nactual:' + actual);
  assert.equal(actualObj, expect,
               'wonky format(' + JSON.stringify(formatTests[u]) +
               ') == ' + expect +
               '\nactual: ' + actualObj);
}

/*
 [from, path, expected]
*/
var relativeTests = [
  ['/foo/bar/baz', 'quux', '/foo/bar/quux'],
  ['/foo/bar/baz', 'quux/asdf', '/foo/bar/quux/asdf'],
  ['/foo/bar/baz', 'quux/baz', '/foo/bar/quux/baz'],
  ['/foo/bar/baz', '../quux/baz', '/foo/quux/baz'],
  ['/foo/bar/baz', '/bar', '/bar'],
  ['/foo/bar/baz/', 'quux', '/foo/bar/baz/quux'],
  ['/foo/bar/baz/', 'quux/baz', '/foo/bar/baz/quux/baz'],
  ['/foo/bar/baz', '../../../../../../../../quux/baz', '/quux/baz'],
  ['/foo/bar/baz', '../../../../../../../quux/baz', '/quux/baz'],
  ['foo/bar', '../../../baz', '../../baz'],
  ['foo/bar/', '../../../baz', '../baz'],
  ['http:
  ['http:
   'https:/p/a/t/h?s#hash2',
   'https:
  ['http:
   'https:
   'https:
  ['http:
   'https:/a/b/c/d',
   'https:
  ['http:
   'http:#hash2',
   'http:
  ['http:
   'http:/p/a/t/h?s#hash2',
   'http:
  ['http:
   'http:
   'http:
  ['http:
   'http:/a/b/c/d',
   'http:
  ['/foo/bar/baz', '/../etc/passwd', '/etc/passwd']
];
relativeTests.forEach(function(relativeTest) {
  var a = url.resolve(relativeTest[0], relativeTest[1]),
      e = relativeTest[2];
  assert.equal(a, e,
               'resolve(' + [relativeTest[0], relativeTest[1]] + ') == ' + e +
               '\n  actual=' + a);
});



[
  undefined,
  null,
  true,
  false,
  0.0,
  0,
  [],
  {}
].forEach(function(val) {
  assert.throws(function() { url.parse(val); }, TypeError);
});











var bases = [
  'http:
  'http:
  'http:
  'fred:
  'http:
];


var relativeTests2 = [
  
  ['../c', 'foo:a/b', 'foo:c'],
  ['foo:.', 'foo:a', 'foo:'],
  ['/foo/../../../bar', 'zz:abc', 'zz:/bar'],
  ['/foo/../bar', 'zz:abc', 'zz:/bar'],
  
  ['foo/../../../bar', 'zz:abc', 'zz:bar'],
  
  ['foo/../bar', 'zz:abc', 'zz:bar'],
  ['zz:.', 'zz:abc', 'zz:'],
  ['/.', bases[0], 'http:
  ['/.foo', bases[0], 'http:
  ['.foo', bases[0], 'http:

  
  
  ['g:h', bases[0], 'g:h'],
  ['g', bases[0], 'http:
  ['./g', bases[0], 'http:
  ['g/', bases[0], 'http:
  ['/g', bases[0], 'http:
  ['
  
  
  ['?y', bases[0], 'http:
  ['g?y', bases[0], 'http:
  
  
  ['#s', bases[0], 'http:
  ['g#s', bases[0], 'http:
  ['g?y#s', bases[0], 'http:
  [';x', bases[0], 'http:
  ['g;x', bases[0], 'http:
  ['g;x?y#s', bases[0], 'http:
  
  
  ['', bases[0], 'http:
  ['.', bases[0], 'http:
  ['./', bases[0], 'http:
  ['..', bases[0], 'http:
  ['../', bases[0], 'http:
  ['../g', bases[0], 'http:
  ['../..', bases[0], 'http:
  ['../../', bases[0], 'http:
  ['../../g', bases[0], 'http:
  ['../../../g', bases[0], ('http:
  ['../../../../g', bases[0], ('http:
  
  
  ['/./g', bases[0], 'http:
  
  
  ['/../g', bases[0], 'http:
  ['g.', bases[0], 'http:
  ['.g', bases[0], 'http:
  ['g..', bases[0], 'http:
  ['..g', bases[0], 'http:
  ['./../g', bases[0], 'http:
  ['./g/.', bases[0], 'http:
  ['g/./h', bases[0], 'http:
  ['g/../h', bases[0], 'http:
  ['g;x=1/./y', bases[0], 'http:
  ['g;x=1/../y', bases[0], 'http:
  ['g?y/./x', bases[0], 'http:
  ['g?y/../x', bases[0], 'http:
  ['g#s/./x', bases[0], 'http:
  ['g#s/../x', bases[0], 'http:
  ['http:g', bases[0], ('http:g', 'http:
  ['http:', bases[0], ('http:', bases[0])],
  
  ['/a/b/c/./../../g', bases[0], 'http:

  
  
  ['g', bases[1], 'http:
  ['./g', bases[1], 'http:
  ['g/', bases[1], 'http:
  ['/g', bases[1], 'http:
  ['
  
  
  ['?y', bases[1], 'http:
  ['g?y', bases[1], 'http:
  ['g?y/./x', bases[1], 'http:
  ['g?y/../x', bases[1], 'http:
  ['g#s', bases[1], 'http:
  ['g#s/./x', bases[1], 'http:
  ['g#s/../x', bases[1], 'http:
  ['./', bases[1], 'http:
  ['../', bases[1], 'http:
  ['../g', bases[1], 'http:
  ['../../', bases[1], 'http:
  ['../../g', bases[1], 'http:

  
  
  
  ['g', bases[2], 'http:
  ['./g', bases[2], 'http:
  ['g/', bases[2], 'http:
  ['g?y', bases[2], 'http:
  [';x', bases[2], 'http:
  ['g;x', bases[2], 'http:
  ['g;x=1/./y', bases[2], 'http:
  ['g;x=1/../y', bases[2], 'http:
  ['./', bases[2], 'http:
  ['../', bases[2], 'http:
  ['../g', bases[2], 'http:
  ['../../', bases[2], 'http:
  ['../../g', bases[2], 'http:

  
  
  ['g:h', bases[3], 'g:h'],
  ['g', bases[3], 'fred:
  ['./g', bases[3], 'fred:
  ['g/', bases[3], 'fred:
  ['/g', bases[3], 'fred:
  ['
  ['
  ['
  ['./', bases[3], 'fred:
  ['../', bases[3], 'fred:
  ['../g', bases[3], 'fred:

  ['../../', bases[3], 'fred:
  ['../../g', bases[3], 'fred:
  ['../../../g', bases[3], 'fred:
  
  ['../../../../g', bases[3], 'fred:

  
  
  ['g:h', bases[4], 'g:h'],
  ['g', bases[4], 'http:
  ['./g', bases[4], 'http:
  ['g/', bases[4], 'http:
  ['/g', bases[4], 'http:
  ['
  ['
  ['
  ['./', bases[4], 'http:
  ['../', bases[4], 'http:
  ['../g', bases[4], 'http:
  ['../../', bases[4], 'http:
  ['../../g', bases[4], 'http:
  
  ['../../../g', bases[4], 'http:
  
  ['../../../../g', bases[4], 'http:

  
  ['bar:abc', 'foo:xyz', 'bar:abc'],
  ['../abc', 'http:
  ['http:
  ['../r', 'http:
  ['q/r', 'http:
  ['q/r#s', 'http:
  ['q/r#s/t', 'http:
  ['ftp:
  ['', 'http:
  ['', 'http:
  ['', 'http:
  ['z/', 'http:
  ['#Animal',
   'file:/swap/test/animal.rdf',
   'file:/swap/test/animal.rdf#Animal'],
  ['../abc', 'file:/e/x/y/z', 'file:/e/x/abc'],
  ['/example/x/abc', 'file:/example2/x/y/z', 'file:/example/x/abc'],
  ['../r', 'file:/ex/x/y/z', 'file:/ex/x/r'],
  ['/r', 'file:/ex/x/y/z', 'file:/r'],
  ['q/r', 'file:/ex/x/y', 'file:/ex/x/q/r'],
  ['q/r#s', 'file:/ex/x/y', 'file:/ex/x/q/r#s'],
  ['q/r#', 'file:/ex/x/y', 'file:/ex/x/q/r#'],
  ['q/r#s/t', 'file:/ex/x/y', 'file:/ex/x/q/r#s/t'],
  ['ftp:
  ['', 'file:/ex/x/y', 'file:/ex/x/y'],
  ['', 'file:/ex/x/y/', 'file:/ex/x/y/'],
  ['', 'file:/ex/x/y/pdq', 'file:/ex/x/y/pdq'],
  ['z/', 'file:/ex/x/y/', 'file:/ex/x/y/z/'],
  ['file:
   'file:/devel/WWW/2000/10/swap/test/reluri-1.n3',
   'file:
  ['file:
   'file:/home/connolly/w3ccvs/WWW/2000/10/swap/test/reluri-1.n3',
   'file:
  ['./#blort', 'file:/some/dir/foo', 'file:/some/dir/#blort'],
  ['./#', 'file:/some/dir/foo', 'file:/some/dir/#'],
  
  ['./', 'http:


  
  
  

  
  ['./q:r', 'http:
  ['./p=q:r', 'http:
  ['?pp/rr', 'http:
  ['y/z', 'http:
  ['local/qual@domain.org#frag',
   'mailto:local',
   'mailto:local/qual@domain.org#frag'],
  ['more/qual2@domain2.org#frag',
   'mailto:local/qual1@domain1.org',
   'mailto:local/more/qual2@domain2.org#frag'],
  ['y?q', 'http:
  ['/x/y?q', 'http:
  ['c/d', 'foo:a/b', 'foo:a/c/d'],
  ['/c/d', 'foo:a/b', 'foo:/c/d'],
  ['', 'foo:a/b?c#d', 'foo:a/b?c'],
  ['b/c', 'foo:a', 'foo:b/c'],
  ['../b/c', 'foo:/a/y/z', 'foo:/a/b/c'],
  ['./b/c', 'foo:a', 'foo:b/c'],
  ['/./b/c', 'foo:a', 'foo:/b/c'],
  ['../../d', 'foo:
  ['.', 'foo:a', 'foo:'],
  ['..', 'foo:a', 'foo:'],

  
  
  
  ['abc', 'http:
  ['../../x%2Fabc', 'http:
  ['../x%2Fabc', 'http:
  ['abc', 'http:
  ['q%3Ar', 'http:
  ['/x%2Fabc', 'http:
  ['/x%2Fabc', 'http:
  ['/x%2Fabc', 'http:

  
  ['local2@domain2', 'mailto:local1@domain1?query1', 'mailto:local2@domain2'],
  ['local2@domain2?query2',
   'mailto:local1@domain1',
   'mailto:local2@domain2?query2'],
  ['local2@domain2?query2',
   'mailto:local1@domain1?query1',
   'mailto:local2@domain2?query2'],
  ['?query2', 'mailto:local@domain?query1', 'mailto:local@domain?query2'],
  ['local@domain?query2', 'mailto:?query1', 'mailto:local@domain?query2'],
  ['?query2', 'mailto:local@domain?query1', 'mailto:local@domain?query2'],
  ['http:
  ['http:

  
  
  
  
  ['http:this', 'http:
  ['http:this', 'http:base', 'http:this'],
  ['.
  ['b/c
  ['m2@example.ord/c2@example.org',
   'mid:m@example.ord/c@example.org',
   'mid:m@example.ord/m2@example.ord/c2@example.org'],
  ['mini1.xml',
   'file:
   'file:
  ['../b/c', 'foo:a/y/z', 'foo:a/b/c'],

  
  ['http:
   'http:
   'http:
];
relativeTests2.forEach(function(relativeTest) {
  var a = url.resolve(relativeTest[1], relativeTest[0]),
      e = relativeTest[2];
  assert.equal(a, e,
               'resolve(' + [relativeTest[1], relativeTest[0]] + ') == ' + e +
               '\n  actual=' + a);
});





var emptyIsImportant = {'host': true, 'hostname': ''};


relativeTests.forEach(function(relativeTest) {
  var actual = url.resolveObject(url.parse(relativeTest[0]), relativeTest[1]),
      expected = url.parse(relativeTest[2]);


  assert.deepEqual(actual, expected);

  expected = relativeTest[2];
  actual = url.format(actual);

  assert.equal(actual, expected,
               'format(' + actual + ') == ' + expected + '\nactual:' + actual);
});










if (relativeTests2[181][0] === '.
    relativeTests2[181][1] === 'f:/a' &&
    relativeTests2[181][2] === 'f:
  relativeTests2.splice(181, 1);
}
relativeTests2.forEach(function(relativeTest) {
  var actual = url.resolveObject(url.parse(relativeTest[1]), relativeTest[0]),
      expected = url.parse(relativeTest[2]);

  assert.deepEqual(actual, expected);

  var expected = relativeTest[2],
      actual = url.format(actual);

  assert.equal(actual, expected,
               'format(' + relativeTest[1] + ') == ' + expected +
               '\nactual:' + actual);
});

});
