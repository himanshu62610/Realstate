'use strict';





















/*

Read any stream all the way to the end and trigger a single cb

const http = require('http');

const rte = require('readtoend');

http.get('http:
  rte.readToEnd(response, function(err, body) {
    console.log(body);
  });
});

*/

let stream = require('stream');
const util = require('util');

if (!stream.Transform) {
  stream = require('readable-stream');
}

function ReadToEnd(opts) {
  if (!(this instanceof ReadToEnd)) {
    return new ReadToEnd(opts);
  }

  stream.Transform.call(this, opts);

  this._rte_encoding = opts.encoding || 'utf8';

  this._buff = '';
}

module.exports = ReadToEnd;
util.inherits(ReadToEnd, stream.Transform);

ReadToEnd.prototype._transform = function(chunk, encoding, done) {
  this._buff += chunk.toString(this._rte_encoding);
  this.push(chunk);
  done();
};

ReadToEnd.prototype._flush = function(done) {
  this.emit('complete', undefined, this._buff);
  done();
};

ReadToEnd.readToEnd = function(stream, options, cb) {
  if (!cb) {
    cb = options;
    options = {};
  }

  const dest = new ReadToEnd(options);

  stream.pipe(dest);

  stream.on('error', function(err) {
    stream.unpipe(dest);
    cb(err);
  });

  dest.on('complete', cb);

  dest.resume();

  return dest;
};
